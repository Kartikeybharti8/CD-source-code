EXPERIMENT NO. 7 
AIM:Write a lex program to count blank spaces,words,lines in a given file. 
PROGRAM: 
%{ 
 #include <stdio.h> 
int c=0,w=0,s=0,l=0; 
%} 
word [^ \t\n,\.:]+ 
eol [\n] 
blank [ ] 
%% 
{word} {w++; c=c+yyleng;} 
{eol} {l++;} 
{blank} {s++;} 
%% 
void main(intargc,char *argv[]) 
{ 
if (argc!=2) 
{ 
printf("usage : ./a.out in.txt \n"); 
exit(0); 
} 
yyin=fopen(argv[1],"r"); 
yylex(); 
printf("no. of word %d \n",w); 
printf("no. of char %d \n",c); 
printf("no. of line %d \n",l); 
printf("no. of space %d \n",s); 
} 
intyywrap() 
{ 
return 1; 
} 
CODE OUTPUT: 
CONTENTS OF IN.TXT FILE 
my 
name is xyz 
and i am 
from abc 
no. of word 9 
no. of char 24 
no. of line 4 
no. of space 5


#################################################################################



EXPERIMENT NO. 8 
AIM:Write a lex program to count the no. of vowels and consonants in a C file. 
PROGRAM: 
CODE: ( vowel.l is the filename in which the below code is written) 
%{ 
#include <stdio.h> 
int vowel=0; 
int cons=0; 
%} 
%% 
[aeiouAEIOU] {vowel++;} 
[a-zA-Z] {cons++;} 
.+ {;} 
%% 
void main() 
{ 
printf(“enter the string\n”); 
yylex(); 
printf(“no. of vowels is : %d \n”, vowel); 
printf(“no. of consonent is : %d \n”, cons); 
} 
intyywrap() 
{ 
return 1; 
} 
CODE OUTPUT: 
lexvowel.l 
enter the string 
my name is 
no.of vowel is: 3 
no.of consonant is: 5



#####################################################################################


EXPERIMENT NO. 9 
AIM:Write a YACC program to recognize strings aaab,abbb using a^nb^n, where 
b>=0. 
PROGRAM: 
Lex part : 
%{ 
#include "y.tab.h" 
%} 
%% 
a return A; 
b return B; 
.|\n return yytext[0]; 
%% 
YaccPart : 
%{ 
#include<stdio.h> 
int valid=1; 
%} 
%token A B 
%% 
str:S'\n' {return 0;} 
S:A S B 
 | 
 ; 
%% 
main() 
{ 
printf("Enter the string:\n"); 
yyparse(); 
 if(valid==1) 
printf("\nvalid string"); 
} 
 
CODE OUTPUT: 
Input: ab 
Output: valid string 
Input: aab 
Output: invalid string 
Input: aabb 
Output: valid string 
Input: abb 
Output: invalid string 
Input: aaabbb 
Output: valid string



########################################################################################



EXPERIMENT NO. 10 
AIM:Write a YACC program to evaluate an arithmetic expression involving 
operators +,-,* and /. 
PROGRAM: 
% 
{ 
 /* Definition section*/ 
 #include "y.tab.h" 
 extern yylval; 
 % 
} 
% % 
 [0 - 9] 
 + 
{ 
 yylval = atoi(yytext); 
 return NUMBER; 
} 
[a - zA - Z] + { return ID; } 
[\t] + ; 
\n { return 0; } 
. { returnyytext[0]; } 
% % 
% { 
/* Definition section */ 
#include 
 % 
} 
% token NUMBER ID 
// setting the precedence 
// and associativity of operators 
% left '+' '-' 
% left '*' '/' 
/* Rule Section */ 
% 
% E : T 
{ 
printf("Result = %d\n", $$); 
return 0; 
} 
T : T '+' T { $$ = $1 + $3; } 
| T '-' T { $$ = $1 - $3; } 
| T '*' T { $$ = $1 * $3; } 
| T '/' T { $$ = $1 / $3; } 
| '-' NUMBER { $$ = -$2; } 
| '-' ID { $$ = -$2; } 
| '(' T ')' { $$ = $2; } 
| NUMBER { $$ = $1; } 
| ID { $$ = $1; }; 
% % 
 intmain() 
{ 
 printf("Enter the expression\n"); 
 yyparse(); 
} 
/* For printing error messages */ 
intyyerror(char* s) 
{ 
 printf("\nExpression is invalid\n"); 
} 
CODE OUTPUT: 
Input: 7*(5-3)/2 
Output: 7 
Input: 6/((3-2)*(-5+2)) 
Output: -2


###################################################################################


EXPERIMENT NO. 11 
AIM:Write a C program to find first of any grammar. 
PROGRAM: 
#include<stdio.h> 
#include<ctype.h> 
void FIRST(char[],char ); 
void addToResultSet(char[],char); 
intnumOfProductions; 
char productionSet[10][10]; 
main() 
{ 
inti; 
 char choice; 
 char c; 
 char result[20]; 
printf("How many number of productions ? :"); 
scanf(" %d",&numOfProductions); 
 for(i=0;i<numOfProductions;i++)//read production string eg: E=E+T 
 { 
printf("Enter productions Number %d : ",i+1); 
scanf(" %s",productionSet[i]); 
 } 
 do 
 { 
printf("\n Find the FIRST of :"); 
scanf(" %c",&c); 
 FIRST(result,c); //Compute FIRST; Get Answer in 'result' array 
printf("\n FIRST(%c)= { ",c); 
 for(i=0;result[i]!='\0';i++) 
printf(" %c ",result[i]); //Display result 
printf("}\n"); 
printf("press 'y' to continue : "); 
scanf(" %c",&choice); 
 } 
while(choice=='y'||choice =='Y'); 
} 
/* 
 *Function FIRST: 
 *Compute the elements in FIRST(c) and write them 
 *in Result Array. 
 */ 
void FIRST(char* Result,char c) 
{ 
inti,j,k; 
 char subResult[20]; 
intfoundEpsilon; 
subResult[0]='\0'; 
Result[0]='\0'; 
 //If X is terminal, FIRST(X) = {X}. 
 if(!(isupper(c))) 
 { 
addToResultSet(Result,c); 
return ; 
 } 
 //If X is non terminal 
 //Read each production 
 for(i=0;i<numOfProductions;i++) 
 { 
//Find production with X as LHS 
 if(productionSet[i][0]==c) 
 { 
//If X → ε is a production, then add ε to FIRST(X). 
 if(productionSet[i][2]=='$') addToResultSet(Result,'$'); 
 //If X is a non-terminal, and X → Y1 Y2 … Yk 
 //is a production, then add a to FIRST(X) 
 //if for some i, a is in FIRST(Yi), 
 //and ε is in all of FIRST(Y1), …, FIRST(Yi-1). 
 else 
 { 
 j=2; 
 while(productionSet[i][j]!='\0') 
 { 
foundEpsilon=0; 
 FIRST(subResult,productionSet[i][j]); 
 for(k=0;subResult[k]!='\0';k++) 
addToResultSet(Result,subResult[k]); 
 for(k=0;subResult[k]!='\0';k++) 
 if(subResult[k]=='$') 
 { 
foundEpsilon=1; 
 break; 
 } 
 //No ε found, no need to check next element 
 if(!foundEpsilon) 
 break; 
j++; 
 } 
 } 
 } 
} 
return ; 
} 
/* addToResultSet adds the computed 
 *element to result set. 
 *This code avoids multiple inclusion of elements 
 */ 
void addToResultSet(char Result[],char val) 
{ 
int k; 
for(k=0 ;Result[k]!='\0';k++) 
 if(Result[k]==val) 
 return; 
 Result[k]=val; 
 Result[k+1]='\0'; 
} 


























